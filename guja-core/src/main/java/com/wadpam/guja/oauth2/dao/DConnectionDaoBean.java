package com.wadpam.guja.oauth2.dao;

/*
 * #%L
 * guja-core
 * %%
 * Copyright (C) 2014 Wadpam
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with this program.  If not, see
 * <http://www.gnu.org/licenses/gpl-3.0.html>.
 * #L%
 */


import com.google.inject.Inject;
import com.wadpam.guja.oauth2.domain.DConnection;
import net.sf.mardao.dao.Supplier;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.cache.annotation.CacheDefaults;
import javax.cache.annotation.CacheRemove;
import javax.cache.annotation.CacheResult;

/**
 * Implementation of Business Methods related to entity DConnection.
 * This (empty) class is generated by mardao, but edited by developers.
 * It is not overwritten by the generator once it exists.
 * <p/>
 * Generated on 2014-12-02T21:52:55.127+0100.
 *
 * @author mardao DAO generator (net.sf.mardao.plugin.ProcessDomainMojo)
 */
@CacheDefaults(cacheName = "DConnectionDaoBean")
public class DConnectionDaoBean extends GeneratedDConnectionDaoImpl {
  private static final Logger LOGGER = LoggerFactory.getLogger(DConnectionDaoBean.class);


  @Inject
  public DConnectionDaoBean(Supplier supplier) {
    super(supplier);
  }

  /**
   * Enable caching based on access token.
   * @param accessToken access token
   */
  @CacheResult
  @Override
  public DConnection findByAccessToken(String accessToken) {
    return super.findByAccessToken(accessToken);
  }

  /**
   * Invalidate cache for an access token.
   * This method never deletes anything from the database and can safely be used to invalidate the cache after an update of delete operation.
   * @param accessToken access token to invalidate
   */
  @CacheRemove
  public void invalidateCacheByAccessToken(String accessToken) {
    // Do nothing
  }

}
