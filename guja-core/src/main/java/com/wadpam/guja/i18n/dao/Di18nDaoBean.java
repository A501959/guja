package com.wadpam.guja.i18n.dao;

/*
 * #%L
 * guja-base
 * %%
 * Copyright (C) 2014 Wadpam
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with this program.  If not, see
 * <http://www.gnu.org/licenses/gpl-3.0.html>.
 * #L%
 */


import com.google.inject.Inject;
import com.wadpam.guja.i18n.domain.Di18n;
import net.sf.mardao.core.filter.Filter;
import net.sf.mardao.dao.Supplier;

import javax.cache.annotation.CacheKey;
import javax.cache.annotation.CacheResult;

/**
 * Implementation of Business Methods related to entity Di18n.
 * This (empty) class is generated by mardao, but edited by developers.
 * It is not overwritten by the generator once it exists.
 * <p/>
 * Generated on 2014-12-07T20:44:32.554+0100.
 *
 * @author mardao DAO generator (net.sf.mardao.plugin.ProcessDomainMojo)
 */
public class Di18nDaoBean
    extends GeneratedDi18nDaoImpl {

  @Inject
  public Di18nDaoBean(Supplier supplier) {
    super(supplier);
  }

  @CacheResult(cacheName = "Di18n")
  // All parameters will be used as cache keys
  public String find(String key, String baseBundle, String language) {

    Iterable<Di18n> iterator = queryIterable(false, 0,
        1, null,
        Di18nMapper.Field.KEY.getFieldName(), false,
        null, false,
        Filter.equalsFilter(Di18nMapper.Field.KEY.getFieldName(), key),
        Filter.equalsFilter(Di18nMapper.Field.BASEBUNDLE.getFieldName(), baseBundle),
        Filter.equalsFilter(Di18nMapper.Field.LOCALE.getFieldName(), language));

    return iterator.iterator().hasNext() ? iterator.iterator().next().getLocalizedMessage() : null;

  }

}
